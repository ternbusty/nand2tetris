// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction[15] が 0 のとき A 命令、1 のとき C 命令
    Mux(a=false, b=true, sel=instruction[15], out=isC);

    // instruction[3] は d ビット。M に書き込むかどうかを決定する
    Or(a=instruction[3], b=false, out=isMflag);
    // writeM (M に書き込むかどうかの bool) を出力。A のときは無条件で false
    // こんなことをしなくても、単に [3] と [15] の And を取ればよかった
    Mux(a=false, b=isMflag, sel=isC, out=writeM);
    
    // A レジスタの処理
    // instruction[5] は d ビット。A に書き込むかどうかを決定する
    // A 命令であるか, あるいは C 命令でかつ instruction[5] == 1 なら load する
    Mux(a=true, b=instruction[5], sel=isC, out=isLoadA);
    // A 命令なら instruction を、C 命令なら outALU を読み込む
    Mux16(a=instruction, b=outALU, sel=isC, out=loadobj); // 図 5-7 の A レジスタ手間のマルチプレキサ
    ARegister(in=loadobj, load=isLoadA, out=outA);
    // addressM を出力する。先頭の 1 bit を削る。これを用意しなくても、単に上の行で out[0..14] = addressM で良かった
    Trim16to15(in=outA, out=addressM);

    // 計算結果を D レジスタに保存する
    // instruction[4] は d ビット
    Mux(a=false, b=instruction[4], sel=isC, out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    // instruction[12] は、ALU が A レジスタかメモリ入力のどちらを操作するかを決定する (p71 図 4-3 の左右が決定される)
    // 0 のときは A からの出力を, 1 のときは inM を利用
    Mux16(a=outA, b=inM, sel=instruction[12], out=AorM); // 図 5-7 の、ALU の手間にあるマルチプレキサ
    // ALU
    ALU(x=outD, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zr, ng=ng);
    // C 命令のとき outALU を outM として出力。A 命令の時は何を出力しても良い
    Mux16(a=false, b=outALU, sel=isC, out=outM);

    // load は ALU の出力 (outM) が jump の条件を満たしている場合に 1 となる
    Jump(in=instruction[0..2], zr=zr, ng=ng, out=isLoadJump);
    Mux(a=false, b=isLoadJump, sel=isC, out=load);
    // in には A レジスタからの出力が入る
    // load あるいは reset が 1 のときはどうせ無視されるので、inc は常に 1 でよい
    PC(in=outA, load=load, inc=true, reset=reset, out=outPC);
    // PC を出力。先頭の 1 bit を削る。これを用意しなくても、単に上の行で out[0..14] = pc で良かった
    Trim16to15(in=outPC, out=pc);
}