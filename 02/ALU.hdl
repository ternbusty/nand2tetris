// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    make16bit0(in=true, out=zero16);

    // if zx then x = 0
    Mux16(a=x, b=zero16, sel=zx, out=x1); // b = false と簡潔に書ける
    // if nx then x = !x 
    Negate16(in=x1, out=xnegate); // Not16 と同じものだからわざわざ新たに定義する必要はなかったね
    Mux16(a=x1, b=xnegate, sel=nx, out=x2);

    // if ny then y = 0
    Mux16(a=y, b=zero16, sel=zy, out=y1);
    // if ny then y = !y
    Negate16(in=y1, out=ynegate);
    Mux16(a=y1, b=ynegate, sel=ny, out=y2);

    // if f then out = x + y else out = x & y
    And16(a=x2, b=y2, out=andxy); // ありうる出力を先に全部書き出しておくのがポイント
    Add16(a=x2, b=y2, out=addxy);
    Mux16(a=andxy, b=addxy, sel=f, out=out1);

    // if no then out = !out
    Negate16(in=out1, out=out1negate); // 反転したものを準備
    Mux16(a=out1, b=out1negate, sel=no, out=out2);
    Copy(in=out2, out=out);

    // if out = 0 then zr = 1 else zr = 0
    IfZero(in=out2, out=ifzero);
    Mux(a=false, b=true, sel=ifzero, out=zr);
    // if out < 0 then ng = 1 else ng = 0
    IfNegative(in=out2, out=ifnegative); // 単に out[15] = ng と書ける
    Mux(a=false, b=true, sel=ifnegative, out=ng);
}